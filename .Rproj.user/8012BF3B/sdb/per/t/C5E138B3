{
    "contents" : "#Thai Thien\n\nsubmit <- local({\n        getOutput <- function(sid) {\n                ## JUST FOR TESTING\n                ## sid <- sub(\"-dev\", \"\", sid, fixed = TRUE)\n                if(sid == \"pollutantmean-1\") {\n                        source(\"pollutantmean.R\")\n                        pollutantmean(\"specdata\", \"sulfate\", 1:10)\n                }\n                else if(sid == \"pollutantmean-2\") {\n                        source(\"pollutantmean.R\")\n                        pollutantmean(\"specdata\", \"nitrate\", 70:72)\n                }\n                else if(sid == \"pollutantmean-3\") {\n                        source(\"pollutantmean.R\")\n                        pollutantmean(\"specdata\", \"sulfate\", 34)\n                }\n                else if(sid == \"pollutantmean-4\") {\n                        source(\"pollutantmean.R\")\n                        pollutantmean(\"specdata\", \"nitrate\")\n                }\n                else if(sid == \"complete-1\") {\n                        source(\"complete.R\")\n                        cc <- complete(\"specdata\", c(6, 10, 20, 34, 100, 200, 310))\n                        paste(cc$nobs, collapse = \"\\n\")\n                }\n                else if(sid == \"complete-2\") {\n                        source(\"complete.R\")\n                        cc <- complete(\"specdata\", 54)\n                        cc$nobs\n                }\n                else if(sid == \"complete-3\") {\n                        source(\"complete.R\")\n                        set.seed(42)\n                        cc <- complete(\"specdata\", 332:1)\n                        use <- sample(332, 10)\n                        paste(cc[use, \"nobs\"], collapse = \"\\n\")                \n                }\n                else if(sid == \"corr-1\") {\n                        source(\"corr.R\")\n                        cr <- corr(\"specdata\")\n                        cr <- sort(cr)\n                        set.seed(868)\n                        out <- round(cr[sample(length(cr), 5)], 4)\n                        paste(out, collapse = \"\\n\")\n                }\n                else if(sid == \"corr-2\") {\n                        source(\"corr.R\")\n                        cr <- corr(\"specdata\", 129)\n                        cr <- sort(cr)\n                        n <- length(cr)\n                        set.seed(197)\n                        out <- c(n, round(cr[sample(n, 5)], 4))\n                        paste(out, collapse = \"\\n\")\n                        \n                }\n                else if(sid == \"corr-3\") {\n                        source(\"corr.R\")\n                        cr <- corr(\"specdata\", 2000)\n                        n <- length(cr)\n                        cr <- corr(\"specdata\", 1000)\n                        cr <- sort(cr)\n                        paste(c(n, round(cr, 4)), collapse = \"\\n\")\n                }\n                else {\n                        stop(\"invalid part number\")\n                }\n        }\n        partPrompt <- function() {\n                partlist <- list(\"pollutantmean-1\" = \"'pollutantmean' part 1\",\n                                 \"pollutantmean-2\" = \"'pollutantmean' part 2\",\n                                 \"pollutantmean-3\" = \"'pollutantmean' part 3\",\n                                 \"pollutantmean-4\" = \"'pollutantmean' part 4\",\n                                 \"complete-1\" = \"'complete' part 1\",\n                                 \"complete-2\" = \"'complete' part 2\",\n                                 \"complete-3\" = \"'complete' part 3\",\n                                 \"corr-1\" = \"'corr' part 1\",\n                                 \"corr-2\" = \"'corr' part 2\",\n                                 \"corr-3\" = \"'corr' part 3\"\n                                 )\n                \n                pretty_out(\"Which part are you submitting?\")\n                part <- select.list(partlist, graphics=FALSE)\n                names(part)\n        }\n        getChallenge <- function(email, challenge.url) {\n                params <- list(email_address = email,\n                               response_encoding = \"delim\")\n                result <- getForm(challenge.url, .params = params)\n                s <- strsplit(result, \"|\", fixed = TRUE)[[1]]\n                list(ch.key = s[5], state = s[7])\n        }\n        challengeResponse <- function(password, ch.key) {\n                x <- paste(ch.key, password, sep = \"\")\n                digest(x, algo = \"sha1\", serialize = FALSE)\n        }\n        submitSolution <- function(email, ch.resp, sid, output, signature, submit.url,\n                                   src = \"\", http.version = NULL) {\n                output <- as.character(base64(output))\n                src <- as.character(base64(src))\n                params <- list(assignment_part_sid = sid,\n                               email_address = email,\n                               submission = output,\n                               submission_aux = src,\n                               challenge_response = ch.resp,\n                               state = signature)\n                params <- lapply(params, URLencode)\n                result <- postForm(submit.url, .params = params)\n                s <- strsplit(result, \"\\\\r\\\\n\")[[1]]\n                tail(s, 1)\n        }\n        get_courseid <- function() {\n                pretty_out(\"The first item I need is your Course ID. For example, if the\",\n                           \"homepage for your Coursera course was\",\n                           \"'https://class.coursera.org/rprog-001',\",\n                           \"then your course ID would be 'rprog-001' (without the quotes).\", skip_after=TRUE)\n                repeat {\n                        courseid <- readline(\"Course ID: \")\n                        ## Remove quotes if there are any\n                        courseid <- gsub(\"\\'|\\\"\", \"\", courseid)\n                        ## Set up test cases\n                        is_url <- str_detect(courseid, \"www[.]|http:|https:\")\n                        is_numbers <- str_detect(courseid, \"^[0-9]+$\")\n                        is_example <- str_detect(courseid, fixed(\"rprog-001\"))\n                        \n                        ## Check if courseid is none of the bad things\n                        if(!any(is_url, is_numbers, is_example)){\n                                break\n                                ## courseid is one of the bad things\n                        } else {\n                                ## Check if courseid is a url\n                                if(is_url) {\n                                        pretty_out(\"It looks like you entered a web address, which is not what I'm\",\n                                                   \"looking for.\")\n                                }\n                                ## Check if courseid is all numbers\n                                if(is_numbers) {\n                                        pretty_out(\"It looks like you entered a numeric ID, which is not what I'm\",\n                                                   \"looking for.\")\n                                }\n                                ## Check if the user stole the example courseid\n                                if(is_example) {\n                                        pretty_out(\"It looks like you entered the Course ID that I used as an\",\n                                                   \"example, which is not what I'm looking for.\")\n                                }\n                        }\n                        pretty_out(\"Instead, I need your Course ID, which is the last\",\n                                   \"part of the web address for your Coursera course.\",\n                                   \"For example, if the homepage for your Coursera course was\",\n                                   \"'https://class.coursera.org/rprog-001',\",\n                                   \"then your course ID would be 'rprog-001' (without the quotes).\",\n                                   skip_after=TRUE)\n                }\n                courseid\n        }\n        pretty_out <- function(..., skip_before=TRUE, skip_after=FALSE) {\n                wrapped <- strwrap(str_c(..., sep = \" \"),\n                                   width = getOption(\"width\") - 2)\n                mes <- str_c(\"| \", wrapped, collapse = \"\\n\")\n                if(skip_before) mes <- paste0(\"\\n\", mes)\n                if(skip_after) mes <- paste0(mes, \"\\n\")\n                message(mes)\n        }\n        checkPkgs <- function() {\n                pkg.inst <- installed.packages()\n                pkgs <- c(\"RCurl\", \"digest\", \"stringr\")\n                have.pkg <- pkgs %in% rownames(pkg.inst)\n                \n                if(any(!have.pkg)) {\n                        message(\"\\nSome packages need to be installed.\\n\")\n                        r <- readline(\"Install necessary packages [y/n]? \")\n                        if(tolower(r) == \"y\") {\n                                need <- pkgs[!have.pkg]\n                                message(\"\\nInstalling packages \",\n                                        paste(need, collapse = \", \"))\n                                install.packages(need)\n                        }\n                }\n        }\n        loginPrompt <- function() {\n                courseid <- get_courseid()       \n                email <- readline(\"Submission login (email): \")\n                passwd <- readline(\"Submission  password: \")\n                r <- list(courseid = courseid, email = email, passwd = passwd)\n                assign(\".CourseraLogin\", r, globalenv())\n                invisible(r)\n        }\n        function(manual = FALSE, resetLogin = FALSE) {\n                checkPkgs()\n                suppressPackageStartupMessages(library(RCurl))\n                library(digest)\n                library(stringr)\n                readline(\"\\nPress Enter to continue...\")\n                if(!manual) {\n                        confirmed <- FALSE\n                        need2fix <- FALSE\n                        while(!confirmed) {\n                                if(exists(\".CourseraLogin\") && !resetLogin && !need2fix)\n                                        cred <- get(\".CourseraLogin\")\n                                else\n                                        cred <- loginPrompt()\n                                if(!is.list(cred) || !(names(cred) %in% c(\"email\", \"passwd\", \"courseid\")))\n                                        stop(\"problem with login/password\")\n                                \n                                courseid <- cred$courseid\n                                email <- cred$email\n                                password <- cred$passwd\n                                \n                                pretty_out(\"Is the following information correct?\",\n                                           skip_after=TRUE)\n                                message(\"Course ID: \", courseid,\n                                        \"\\nSubmission login (email): \", email, \n                                        \"\\nSubmission password: \", password)\n                                yn <- c(\"Yes, go ahead!\", \n                                        \"No, I need to change something.\")\n                                confirmed <- identical(select.list(yn, graphics=FALSE), yn[1])\n                                if(!confirmed) need2fix <- TRUE\n                        }\n                        \n                        ## Set urls based on confirmed courseid\n                        challenge.url <- paste(\"http://class.coursera.org\", courseid,\n                                               \"assignment/challenge\", sep = \"/\")\n                        submit.url <- paste(\"http://class.coursera.org\", courseid,\n                                            \"assignment/submit\", sep = \"/\")\n                }\n                ## Prompt Submission Part\n                sid <- partPrompt()\n                \n                ## Get output\n                output <- getOutput(sid)        \n                \n                if(!manual) {\n                        ## Get challenge\n                        ch <- try(getChallenge(email, challenge.url), silent=TRUE)\n                        ## Check if url is valid, i.e. challenge received\n                        ch_ok <- !is(ch, \"try-error\") && exists(\"ch.key\", ch) && !is.na(ch$ch.key)\n                        if(!ch_ok) {\n                                stop(\"Either the course ID you entered is not valid or your course site \", \n                                     \"is unreachable at this time. If you'd like to submit manually, you \", \n                                     \"can run submit(manual=TRUE).\")\n                        }\n                        \n                        ## Attempt submission with challenge\n                        ch.resp <- challengeResponse(password, ch$ch.key)\n                        results <- submitSolution(email, ch.resp, sid, output, ch$state, \n                                                  submit.url = submit.url)\n                        if(!length(results))\n                                results <- \"Incorrect!\"\n                        cat(\"Result: \", results, \"\\n\")\n                }\n                else {\n                        outfile <- paste(sid, \"output.txt\", sep = \"-\")\n                        writeLines(as.character(output), outfile)\n                        cat(sprintf(\"Please upload the file '%s' to Coursera\\n\",\n                                    outfile))\n                }\n                invisible()\n        }\n})\n\n",
    "created" : 1421515743290.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3638996659",
    "id" : "C5E138B3",
    "lastKnownWriteTime" : 1421556052,
    "path" : "~/Rproject/Assignment1/submitscript1.R",
    "project_path" : "submitscript1.R",
    "properties" : {
    },
    "source_on_save" : true,
    "type" : "r_source"
}